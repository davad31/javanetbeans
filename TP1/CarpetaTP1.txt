Carpeta del primer parcial 
/*
9 /05/2025

Programacion orientada a objetos

los metodos que son identico sin  el override se le llama sobre carga aun sabiendo que los metodos no se heredan si se puede sobrecargar.
Las clases abstractas por lo general son clases padres.
se dice que es abstracta por que eta incompleta y no se puede generar objetos porque es un molde incompleto.

metodos abstractos:
es cuando se necesita la monda pero no sabemos como entonces lo usamos como plantilla.

abstract class Mamifero{
abstract void comer ();        ---------> Esta es solo una plantilla.
void respirar(){
  Syste,.out.println("Respira aire");
  }
}


    public abstract class Empleado {
        //atributos
        protected String nombre;            ------------> esto de aca no jala porque es abstracto y no se puede instanciar
        protected int idEmpleado;
        protected float salario;
}



cualquier clase que contenga uno o mas metodos abstractos debe declararse como abstract.
Una clase abstracta no puede ser instanciada. es decir no se pueden crear objetos.
no es necesario declarar constrctores dentro de una clase bastracta.
 A la hora de sobreescribir un metodo abstracto, esta deja de ser abtracto porque ya tiene cuerpo.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Relacion de asociacion:
se da entre dos clases y se marca con una flecha normal o como comunnmente se ve, como una flecha.
la relacion de asociacion se le como "tiene".


_____________________
|        VENTA       |  
|____________________|
|producto: producto[]|
|vendedor:           |
|total: double       |
______________________
            |    "tiene"
____________|____________
|        Cliente        |
|______________________ |
|nombre : String        |
|cedula : string        |
|tiene_tarjeta: boolean |
_________________________
            | "tiene"
            |
____________|____________
|        vendedor       |
|______________________ |
|nombre : String        |
|cedula : string        |
|codigoTrabajador:string|
_________________________
             |  "tiene"
             |
____________ ˅___________
|        PERSONA        |
|______________________ |
|nombre : String        |
|cedula : string        |
_________________________

package Entidades;

public class curso {
    private String nombreCurso;
    //relaciones de asociacion.
    private Profesor profesor; // un curso tiene un profesor
    private Estudiante[] estudiante; // un curso tiene muchos estudiantes
    
}



EJERCICIO DE LA ASOCIACION:

package Entidades;

import java.util.Scanner;

public class Profesor extends Persona {
    private String tituloAcad;

    public void ingresarDatos() {
        Scanner scanner = new Scanner(System.in);
        super.ingresarDatos();
        System.out.println("Ingresar nivel de profesor: ");
        this.tituloAcad = scanner.nextLine();
    }

    @Override
    public void mostrarDatos() {
        System.out.println("___________________Datos del estudiante___________________");
        super.mostrarDatos();
        System.out.println("Nivel: " + this.tituloAcad);
    }

}
________________________________________________________________________________________________________________________________________________________________________________________
package Entidades;

import java.util.Scanner;

public class Persona {

    protected String nombre;
    protected String cedula;

    public void ingresarDatos(){
        Scanner scanner = new Scanner(System.in);
        System.out.println( " Cedula: ");
        this.cedula = scanner.nextLine();

        System.out.println("NOmbre: ");
        this.nombre = scanner.nextLine();
    }

    public void mostrarDatos(){
        System.out.println("Cedula: " + this.cedula);
        System.out.printf("Nombre: " + this.nombre);
    }
}
_____________________________________________________________________________________________________________________________________________________________________________________________________________________
Package Entidades;

import java.util.Scanner;

public class Estudiante extends Persona{

    private int nivelEstudiante;
    // construcores


    @Override
    public void ingresarDatos() {
        Scanner scanner = new Scanner(System.in);
        super.ingresarDatos();
        System.out.println("Ingresar nivel de estudiante: ");
        this.nivelEstudiante = scanner.nextInt();
        scanner.nextLine();
    }

    @Override
    public void mostrarDatos() {
        System.out.println("___________________Datos del estudiante");
        super.mostrarDatos();
        System.out.println("Nivel: " + this.nivelEstudiante);
    }

}
__________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

package Entidades;

import java.util.Scanner;

public class curso {
    private String nombreCurso;
    //relaciones de asociacion.
    private Profesor profesor; // un curso tiene un profesor
    private Estudiante[] estudiante; // un curso tiene muchos estudiantes

    //constructores

    public curso(){}

    public curso (String nombre, Profesor profesor1){
        this.nombreCurso = nombre;
        this.profesor = profesor1;
    }
    // getters y setters

    public Profesor getProfesor(){
        return this.profesor;
    }

    public Estudiante[] getEstudiante() {
        return this.estudiante;
    }
    public void setProfesor(Profesor profesor1) {
        this.profesor = profesor1;
    }

    public void setEstudiante(Estudiante[] estudiante) {
        this.estudiante = estudiante;
    }

    // metodos

    public void ingresarDatos(){
        Scanner scanner = new Scanner(System.in);

        System.out.println("Nombre del curso: " );
        this.nombreCurso = scanner.nextLine();
    }

    public void mostrarDatos(){
    System.out.println("Mostrar datos");
    System.out.println("Nombre: " + this.nombreCuro);
    System.out.println("profesor");
    this.profesor.mostrarDatos();
    for(int i=0; i< this.estudiante.length; i++){
    this.estudiantes[i].mostrarDatos();
  }
}


______________________________________________________________________________________________
public class main{
public static void Main(String[] args){
    Profesor prof = new Profesor();
    prof.ingresarDatos();
    Estudiante est = new Estudiante();
    est.ingresarDatos();

    Estudiante est2 = new Estudiante();
    est2.ingresarDatos();

  Curso curso = new Curso();
    curso.ingresarDatos();
    curso.setProfesor(prof);
    Estudiante[] arrEst = new estudiante [2];

    arrEst [0] = est;
    arrEst [1] = est2;

    curso.setEstudiante(arrEst);
    curso.mostrarDatos();
  }
}
*/
______________________________________________________________________________________________________________________________________________________________
12/04/2025

Colecciones 
al igual que los arreglos tambien son estructura que nos permite guardar conjunto de cosas pero tienen sus diferencias.
existen 6 colecciones en java con sus ventajas y desventajas.

* permite guardar solo objetos pero los arreglos no.
* crecen dinamicamente segun los elementos que le coloquemos.
* tambien proveer ordenamiento agregan y borran el ultimo .
* existen diferentes tipos de colecciones en los lenguaje de programacion.

en java existe tres tipos de colecciones:
  a) el arraylis de Listt.
 b) el MAP treeMap Hashmap.
c) en conjuntos hasheet treeset.

El arraylist es una especie de arreglo dinamico basado en una implementacion donde los elementos pueden ser accedidos directamente por los metodos get y set.
para agregar o borrar un elemento es necesario mover los elementos que esten a la derecha.
Eso es lo malo de la arraylist.


para poder usar arraylist
 se debe importar de la siguiente manera
import java.util.Arraylist

Arraylist<Estudiante> lista  = new Arraylist<>;
lista.add(estudiante); -> sirve para agregar a la coleccion
lista.add(estudiante1); 
lista.add( index0, element: esstudiante1); 
La coleccion Arraylist permite elementos duplicados

para ver el tamaño del array se usa size ejemplo:
sout ("el tamaño del arreglo: " + lista.size());  .

________________________________________________________________________________________________________________________________________________________________________________________
Estudiante PrimerEstudiante = lista.get(0); // obtenemos el objeto dentro de la lista
        System.out.println("Primer estudiante ");
        PrimerEstudiante.mostrarDatos();
_____________________________________________________________________________________________________________________________________________________________________________________________

        Estudiante PrimerEstudiante = lista.get(0); // obtenemos el objeto dentro de la lista
        System.out.println("Primer estudiante ");
        PrimerEstudiante.mostrarDatos();
        System.out.println("Recorrer el Arraylist");
        for (int i=0; i< lista.size(); i++){
            Estudiante e = lista.get(i);
            e.mostrarDatos();
        }
________________________________________________________________________________________________________________________________________________________________________________________________   
                   
        // eliminar un elemento de la coleccion.
        System.out.println("Eliminar el elemento de la coleccion");
         Estudiante e = lista.remove(0);
        System.out.println("estudiante eliminado");
        e.mostrarDatos();
_____________________________________________________________________________________________________________________________________________________________________________________________________

esto va a estar en el examen.


______________________________________________________________________________________________________________________________________________________________________________________________________
clase administrador:
package administradores;

import entidades.Profesor;
import java.util.ArrayList;
import java.util.Scanner;

public class AdministradoraProfesor {

    public static ArrayList<Profesor> lista = new ArrayList<>();

    public void agregar(Profesor p) {
        lista.add(p);
    }

    public boolean eliminarPorCedula(String cedula) {
        boolean resultado;
        Profesor p = buscarPorCedula(cedula);
        if (p != null) {
            lista.remove(p);
            resultado = true;
        }
        resultado = false;
        return resultado;
    }

    public Profesor buscarPorCedula(String cedula) {
        Profesor profEncontrado = null;
        for (Profesor p : lista) {
            if (p.getCedula().equalsIgnoreCase(cedula)) {
                profEncontrado = p;
            }
        }
        return profEncontrado;
    }

    public ArrayList<Profesor> buscarPorNombre(String nombre) {
        ArrayList<Profesor> encontrados = new ArrayList<>();
        for (Profesor p : lista) {
            if (p.getNombre() != null && p.getNombre().toLowerCase().contains(nombre.toLowerCase())) {
                encontrados.add(p);
            }
        }
        return encontrados;
    }

    public void mostrarLista() {
        for (Profesor p : lista) {
            p.mostrarDatos();
        }
    }

    public void menuProfesores() {
        Scanner sc = new Scanner(System.in);
        int opcion = 0;
        do {
            System.out.println("\n****** Menú de Profesores ******");
            System.out.println("1. Registrar profesor");
            System.out.println("2. Mostrar lista");
            System.out.println("3. Buscar por cédula");
            System.out.println("4. Buscar por nombre");
            System.out.println("5. Eliminar por cédula");
            System.out.println("0. Salir");
            System.out.print("Opción: ");
            opcion = sc.nextInt();
            sc.nextLine();

            switch (opcion) {
                case 1: //ingresar o registrar
                    Profesor nuevo = new Profesor();
                    nuevo.ingresarDatos();
                    agregar(nuevo);
                    break;
                case 2: //mostrar lista de profesores
                    mostrarLista();
                    break;
                case 3://buscar profesor por cedula
                    System.out.print("Cédula: ");
                    String ced = sc.nextLine();
                    Profesor p = buscarPorCedula(ced);
                    if (p != null) {
                        p.mostrarDatos();
                    } else {
                        System.out.println("No encontrado.");
                    }
                    break;
                case 4: //buscar por nombre
                    System.out.print("Nombre de prof a buscar: ");
                    String nom = sc.nextLine();
                    ArrayList<Profesor> resultados = buscarPorNombre(nom);
                    if (!resultados.isEmpty()) {
                        for (Profesor prof : resultados) {
                            prof.mostrarDatos();
                        }
                    } else {
                        System.out.println("No se encontraron coincidencias.");
                    }
                    break;
                case 5:
                    System.out.print("Cédula para eliminar: ");
                    ced = sc.nextLine();
                    if (eliminarPorCedula(ced)) {
                        System.out.println("Eliminado.");
                    } else {
                        System.out.println("No encontrado.");
                    }
                    break;
                case 0:
                    System.out.println("Adiós.");
                    break;
                default:
                    System.out.println("Opción inválida.");
            }
        } while (opcion != 0);
    }

Tanto la clase administrador de profesor va en los mismo que en la clase de ed administrdor dee studinte.

}

}

se esta clase es la main pr las superclase y ls subclases

import entidades.Estudiante;
import java.util.ArrayList;

public class PruebaColeccion {
    public static void main(String[] args) {
        Estudiante e1 = new Estudiante();
        e1.ingresarDatos();
        
        Estudiante e2 = new Estudiante();
        e2.ingresarDatos();
        
        ArrayList<Estudiante> lista = new ArrayList();
        // guardo o agrego dentro de un ArrayList
        lista.add(e1);
        lista.add(e2);
        lista.add(0, e2); //arraylist permite elementos duplicados
        
        System.out.println("Tamano de la coleccion: " + lista.size());
        Estudiante primerEst = lista.get(0);
        System.out.println("Primer estudiante: ");
        primerEst.mostrarDatos();
        System.out.println("Recorrer el ArrayList");
        for(int i=0; i<lista.size(); i++){
            //lista.get(i).mostrarDatos();
            Estudiante e = lista.get(i);
            e.mostrarDatos();
        }
        System.out.println("Eliminar elemento");
        Estudiante e = lista.remove(0);//remove eliminar elementos por indice
        System.out.println("Estudiante eliminado");
        e.mostrarDatos();
    }
    
}
___________________________________________________________________________________________________________________________________________________________________________
//*ENCAPSULAMIENTO:
  Es el segundo pilar fundamental de POO(el primero es la abstraccion).
  por el sentdo de proteger.
 Es la propieda dque permte asegurar la informacion de un objeto esta oculta del mundo exterior.
Acceder o modificar los atributos de una clase a travez de sus metodos.

provee dos principales beneficios a los desarrolladores de software:

modularidad: Indica que debewmos dividiar al programa en elementos bien identificables.
Creando clases y organizandolas.
Ocultamiento: es decir un objeto tiene una "interfas publica"(modificadores de acceso) que otros objetoos pueden utilizar para comunicarse con el.
Esto permite la proteccion de los atributos de un acesso arbitarario por parte de otros programas y metodos.

TU CONTROLAS COMO EL ACCESO A ESOS ATRIBUTOS SE DÁ.

Public = publico +
protegido = protected #
definido = nada 
privada = private -

            la misma clase    otra clase del mismo paqete     Subclase      Otra clase de otro paquete
public           X                            X                  X                     X
protected        X                            X                  X
defalt           X                            X
private          X

variable locales = parametros.
Public permite el uso de la variable dentro de la misma clase siempre y cuando se declare a clase obviamente. Tambien podemos acceder a el en otro paquete y otra clase distinta.
Private solo se permite usar siempre y cuando dentro de la clase mas no de otro paquete o clase externa.


NOTA PARA USAR UN PAQUETE DE UNA CLASE A OTRA CLASE SE DEBE DE IMPORTAR.

/*
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

el set aplica y el get (obtiene el  valor del atributo) lo del set(que seria cambiar el valor).

package entidades;
public class Producto {
    //atributos
    
    public String nombre;
     int cantidadDisponible; // por defecto.
    private float precio;
     
    //constructores
    // 1. constructor por defecto 
   public Producto(){
       this.cantidadDisponible = 5;       
   }
    //2. constructor parametrizado
    public Producto(String nom, int cantidadDisponible){
         this.nombre = nom;
         this.cantidadDisponible= cantidadDisponible;
    }
       
    public Producto( int cantidadDisponible, String nom, float precio){
         this.nombre = nom;
         this.cantidadDisponible= cantidadDisponible;
         this.precio = precio;
    }
       
       //metodos 
    public void mostrarDatos(){
        System.out.println("Datos de producto");
        System.out.println("Nombre "+ this.nombre);
        System.out.println("Cantidad Disponible " + this.cantidadDisponible);
        System.out.println("Precio : "+ this.precio);
    }
       
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

package encapsulamiento;
import entidades.Producto;

public class Encapsulamiento {
    public static void main(String[] args) {
        Producto produ2 = new Producto();
        produ2.nombre = "chanchito feliz"; // esto obviamente ya no va afuncionar porque esta en privado tonces se usa el sett
        produ2.setNombre("chanchito feliz");

        //* produ.2cantidadDisponible = 24; no se puede acceder porque es por defecto
        //y estamos en otro paquete//
        // produ2.precio = 2,54f; // no se puede acceder porque esto es de otro paquete ademas esto esta en provado 
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

package entidades;

public class VentaMain {
    
    public static void main(String[] args) {
        //crear un objeto
        Producto produ = new Producto ();
        produ.nombre = "Pepito el mas capito";
        produ.cantidadDisponible = 30;     
        //produ.precio = 1,54f; // no se puede acceder ´prqie es private
        // solo se puede acceder dentro de la misma clase

    }
}
______________________________________________________________________________________________________________________________________________________________________________
